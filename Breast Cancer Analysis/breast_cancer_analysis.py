# -*- coding: utf-8 -*-
"""Breast Cancer Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Lt_2zs7nvTEh61QtOkNEew3jayhr_X9-

Importing required Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

"""Data Loading and exploration"""

try:
    data = pd.read_csv('breast-cancer.csv')
except FileNotFoundError:
    print("Error: breast_cancer.csv not found. Please ensure the file is in the correct directory.")
    exit()

print("First few rows of the dataset:\n", data.head())

print("\nDataset information:\n", data.info())

print("\nSummary statistics:\n", data.describe())

print("\nMissing values:\n", data.isnull().sum())

print("\nTarget variable distribution:\n", data['diagnosis'].value_counts()) # M = malignant, B = benign

"""Pre-processing the data"""

data['diagnosis'] = data['diagnosis'].map({'M': 1, 'B': 0})

if 'id' in data.columns:
    data = data.drop('id', axis=1)
if 'Unnamed: 32' in data.columns:
    data = data.drop('Unnamed: 32', axis=1)
X = data.drop('diagnosis', axis=1)
y = data['diagnosis']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""Exploratory Data Analysis"""

plt.figure(figsize=(20, 15))
for i, col in enumerate(X.columns):
    plt.subplot(5, 6, i + 1)
    sns.histplot(X[col], kde=True)
    plt.title(col)
plt.tight_layout()
plt.show()

plt.figure(figsize=(20, 15))
for i, col in enumerate(X.columns):
    plt.subplot(5, 6, i + 1)
    sns.histplot(X[col], kde=True)
    plt.title(col)
plt.tight_layout()
plt.show()

plt.figure(figsize=(20, 15))
for i, col in enumerate(X.columns):
    plt.subplot(5, 6, i + 1)
    sns.boxplot(x='diagnosis', y=col, data=data)
    plt.title(col)
plt.tight_layout()
plt.show()

"""Model Training and Evaluation"""

# Logistic Regression
logistic_model = LogisticRegression(random_state=42, max_iter=10000)
logistic_model.fit(X_train_scaled, y_train)
logistic_predictions = logistic_model.predict(X_test_scaled)

print("\nLogistic Regression Results:")
print("Accuracy:", accuracy_score(y_test, logistic_predictions))
print(classification_report(y_test, logistic_predictions))
print("Confusion Matrix:\n", confusion_matrix(y_test, logistic_predictions))

# Random Forest Classifier
random_forest_model = RandomForestClassifier(random_state=42)
random_forest_model.fit(X_train_scaled, y_train)
random_forest_predictions = random_forest_model.predict(X_test_scaled)

print("\nRandom Forest Results:")
print("Accuracy:", accuracy_score(y_test, random_forest_predictions))
print(classification_report(y_test, random_forest_predictions))
print("Confusion Matrix:\n", confusion_matrix(y_test, random_forest_predictions))

# Support Vector Classifier (SVC)
svc_model = SVC(random_state=42)
svc_model.fit(X_train_scaled, y_train)
svc_predictions = svc_model.predict(X_test_scaled)

print("\nSVC Results:")
print("Accuracy:", accuracy_score(y_test, svc_predictions))
print(classification_report(y_test, svc_predictions))
print("Confusion Matrix:\n", confusion_matrix(y_test, svc_predictions))

# --- 5. Hyperparameter Tuning (GridSearchCV) ---

# Example: Tuning Random Forest
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

grid_search = GridSearchCV(RandomForestClassifier(random_state=42), param_grid, cv=5, verbose=2, n_jobs=-1)
grid_search.fit(X_train_scaled, y_train)

best_random_forest = grid_search.best_estimator_
best_random_forest_predictions = best_random_forest.predict(X_test_scaled)

print("\nBest Random Forest Results (after tuning):")
print("Best Parameters:", grid_search.best_params_)
print("Accuracy:", accuracy_score(y_test, best_random_forest_predictions))
print(classification_report(y_test, best_random_forest_predictions))
print("Confusion Matrix:\n", confusion_matrix(y_test, best_random_forest_predictions))

